import asyncio
import re
import html
from telegram import Update
from telegram.constants import ParseMode, ChatAction
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from telegram.error import BadRequest, TelegramError

import httpx

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters


from .config import (
    TELEGRAM_BOT_TOKEN, OPENAI_API_KEY, OPENAI_BASE_URL,
    OPENAI_MODEL, TEMPERATURE, MAX_HISTORY_CHARS,
    SYSTEM_PROMPT, TG_MAX_MESSAGE_LEN, ALLOWED_USERS
)

from src.utils.chunking import chunk_text
from src.utils.memory import make_history_store, build_context
from src.ai_providers.openai_compatible import OpenAICompatibleClient

import logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
logger = logging.getLogger("tg-ai-bot")


# –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
history = make_history_store(maxlen=40)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
ai = OpenAICompatibleClient(base_url=OPENAI_BASE_URL, api_key=OPENAI_API_KEY)


# ----- –ú–µ–Ω—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ -----
# –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –º–µ–Ω—é –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫

def main_menu_markup() -> ReplyKeyboardMarkup:
    keyboard = [
        ["üí¨ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
        ["‚ùì –ü–æ–º–æ—â—å"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

def settings_markup() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data="disable_bot")],
        [InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data="enable_bot")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")],
    ]
    return InlineKeyboardMarkup(buttons)


# ---------- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ ----------
def _looks_like_code(text: str) -> bool:
    return "```" in text or "`" in text or "<" in text or "&" in text

async def safe_reply(update: Update, text: str):
    try:
        if _looks_like_code(text):
            await update.message.reply_text(text)  # –±–µ–∑ parse_mode
            return
        await update.message.reply_text(text, parse_mode=ParseMode.HTML)
    except BadRequest:
        try:
            escaped = html.escape(text)
            await update.message.reply_text(escaped, parse_mode=ParseMode.HTML)
        except BadRequest:
            await update.message.reply_text(text)


# ---------- –û—Ç–ø—Ä–∞–≤–∫–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç..." ----------
async def send_typing(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)


# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò ----------
async def generate_ai_reply(user_id: int) -> str:
    msgs = build_context(history, user_id, SYSTEM_PROMPT, MAX_HISTORY_CHARS)

    delay = 1.0
    for attempt in range(3):
        try:
            if hasattr(ai, "chat"):
                logger.info("[AI] call via ai.chat | model=%s | temp=%.2f | msgs=%d",
                            OPENAI_MODEL, TEMPERATURE, len(msgs))
                return await ai.chat(OPENAI_MODEL, msgs, temperature=TEMPERATURE, max_tokens=2048)

            payload = {
                "model": OPENAI_MODEL,
                "messages": msgs,
                "temperature": TEMPERATURE,
                "stream": False,
                "max_tokens": 2048,
            }
            # –º–∞—Å–∫–∏—Ä—É–µ–º –∫–ª—é—á
            masked_headers = {
                "Authorization": f"Bearer {OPENAI_API_KEY[:6]}***",
                "Content-Type": "application/json",
            }
            logger.info("[AI] direct httpx call | model=%s | temp=%.2f | msgs=%d | headers=%s",
                        OPENAI_MODEL, TEMPERATURE, len(msgs), masked_headers)

            async with httpx.AsyncClient(timeout=30) as client:
                resp = await client.post(f"{OPENAI_BASE_URL}/chat/completions",
                                         headers={"Authorization": f"Bearer {OPENAI_API_KEY}",
                                                  "Content-Type": "application/json"},
                                         json=payload)
                logger.info("[AI] status=%s | body_len=%d", resp.status_code, len(resp.text))
                resp.raise_for_status()
                data = resp.json()
                return data["choices"][0]["message"]["content"].strip()

        except httpx.HTTPStatusError as e:
            status = e.response.status_code
            body = e.response.text
            logger.warning("[AI] HTTP error on attempt %d: %s | body: %.500s", attempt + 1, status, body)
            if attempt == 2:
                raise
        except Exception as e:
            logger.exception("[AI] call failed on attempt %d: %s", attempt + 1, e)
            if attempt == 2:
                raise

        await asyncio.sleep(delay)
        delay *= 2


# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
# –ö–æ–º–∞–Ω–¥–∞ /start: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∏ –Ω–µ —Å—Ç–∞—Ä—Ç—É–µ–º –¥–∏–∞–ª–æ–≥

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
    history[update.effective_user.id].clear()
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.setdefault("mode", "menu")
    context.user_data.setdefault("enabled", True)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_markup()
    )
    context.user_data["mode"] = "menu"


async def show_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–ú–æ–¥–µ–ª—å: {OPENAI_MODEL}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {TEMPERATURE}")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    history[update.effective_user.id].clear()
    await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")


# ---------- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ ----------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    if not update.message or not update.message.text:
        return

    user_id = update.effective_user.id
    text = update.message.text.strip()
    history[user_id].append({"role": "user", "content": text})

    typing_task = asyncio.create_task(send_typing(update.effective_chat.id, context))
    try:
        ai_answer = await generate_ai_reply(user_id)
    except httpx.HTTPStatusError as e:
        status = e.response.status_code
        if status == 401:
            msg = "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ò–ò (–ø—Ä–æ–≤–µ—Ä—å –∫–ª—é—á API)."
        elif status == 429:
            msg = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ."
        elif 500 <= status < 600:
            msg = "–°–µ—Ä–≤–∏—Å –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        else:
            msg = f"–û—à–∏–±–∫–∞ –ò–ò ({status})."
        await update.message.reply_text(msg)
        return
    except Exception:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
        return
    finally:
        typing_task.cancel()

    history[user_id].append({"role": "assistant", "content": ai_answer})

    for chunk in chunk_text(ai_answer, TG_MAX_MESSAGE_LEN):
        await safe_reply(update, chunk)


# –≠–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline‚Äë–∫–Ω–æ–ø–æ–∫
async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_markup())

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        # –í–µ–∂–ª–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await query.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    data = query.data

    if data == "disable_bot":
        context.user_data["enabled"] = False
        await query.edit_message_text("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω. –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å, –≤–µ—Ä–Ω–∏—Å—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return

    if data == "enable_bot":
        context.user_data["enabled"] = True
        await query.edit_message_text("–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥.")
        return

    if data == "clear_history":
        history[user_id].clear()
        await query.edit_message_text("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.")
        return

    if data == "back_to_menu":
        context.user_data["mode"] = "menu"
        # –£–±–µ—Ä—ë–º inline‚Äë–∫–Ω–æ–ø–∫–∏ –∏ –≤–µ—Ä–Ω–µ–º—Å—è –≤ –º–µ–Ω—é
        try:
            await query.edit_message_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.")
        except Exception:
            pass
        await query.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_markup())
        return
    
# –ë–´–°–¢–†–´–ô –í–û–ó–í–†–ê–¢ –í –ú–ï–ù–Æ
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode"] = "menu"
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_markup())



# ---------- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ----------
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Telegram error: %s", context.error)


# ---------- –ó–∞–ø—É—Å–∫ ----------
def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("model", show_model))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_error_handler(on_error)
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    try:
        import uvloop
        uvloop.install()
    except Exception:
        pass
    main()
