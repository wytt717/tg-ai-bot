from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import ContextTypes
from config import ALLOWED_USERS  
from  bot import main_menu_markup
import asyncio, httpx
from .bot import send_typing, generate_ai_reply, chunk_text, TG_MAX_MESSAGE_LEN, safe_reply


history = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üí¨ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
        ["‚ùì –ü–æ–º–æ—â—å"]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    context.user_data["mode"] = "menu"

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –î–æ—Å—Ç—É–ø
    if update.effective_user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    if not update.message or not update.message.text:
        return

    user_id = update.effective_user.id
    text = update.message.text.strip()

    # –†–µ–∂–∏–º—ã
    mode = context.user_data.get("mode", "menu")
    enabled = context.user_data.get("enabled", True)

    # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞: –Ω–µ —Å—Ç–∞—Ä—Ç—É–µ–º –¥–∏–∞–ª–æ–≥ —Å—Ä–∞–∑—É
    if mode == "menu":
        if text == "üí¨ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥":
            context.user_data["mode"] = "dialog"
            await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–ø—É—â–µ–Ω. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å.")
            return
        if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await show_settings(update, context)
            return
        if text == "‚ùì –ü–æ–º–æ—â—å":
            await update.message.reply_text(
                "–Ø –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é –ò–ò.\n"
                "‚Ä¢ –í—ã–±–µ—Ä–∏ ¬´–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥¬ª, —á—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è\n"
                "‚Ä¢ –û—Ç–∫—Ä–æ–π ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç",
                reply_markup=main_menu_markup()
            )
            return
        # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –≤ –º–µ–Ω—é ‚Äî –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_menu_markup())
        return

    # –ï—Å–ª–∏ –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω ‚Äî –¥–∏–∞–ª–æ–≥ –Ω–µ –≤–µ–¥–µ–º
    if not enabled:
        await update.message.reply_text("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω. –û—Ç–∫—Ä–æ–π ¬´‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª –∏ –≤–∫–ª—é—á–∏ –µ–≥–æ.")
        return

    # –†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ ‚Äî –∑–¥–µ—Å—å –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–≤–æ—é —Ç–µ–∫—É—â—É—é –ª–æ–≥–∏–∫—É
    if mode == "dialog":
        history[user_id].append({"role": "user", "content": text})

        typing_task = asyncio.create_task(send_typing(update.effective_chat.id, context))
        try:
            ai_answer = await generate_ai_reply(user_id)
        except httpx.HTTPStatusError as e:
            status = e.response.status_code
            if status == 401:
                msg = "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ò–ò (–ø—Ä–æ–≤–µ—Ä—å –∫–ª—é—á API)."
            elif status == 429:
                msg = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ."
            elif 500 <= status < 600:
                msg = "–°–µ—Ä–≤–∏—Å –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
            else:
                msg = f"–û—à–∏–±–∫–∞ –ò–ò ({status})."
            await update.message.reply_text(msg)
            return
        except Exception:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
            return
        finally:
            typing_task.cancel()

        history[user_id].append({"role": "assistant", "content": ai_answer})

        for chunk in chunk_text(ai_answer, TG_MAX_MESSAGE_LEN):
            await safe_reply(update, chunk)


async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data="disable_bot")],
        [InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data="enable_bot")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")]
    ]
    markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    user_id = update.effective_user.id

    if data == "disable_bot":
        context.user_data["enabled"] = False
        await query.edit_message_text("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω. –ù–∞–∂–º–∏ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.")
    elif data == "enable_bot":
        context.user_data["enabled"] = True
        await query.edit_message_text("–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω.")
    elif data == "clear_history":
        history[user_id] = []
        await query.edit_message_text("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.")
