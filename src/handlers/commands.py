from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from src.utils.access import deny_if_not_allowed
from src.ai_providers.openai_compatible import ask_ai
import logging

try:
    from src.utils.memory import user_memory
except ImportError:
    user_memory = None

try:
    from src.utils.chunking import split_text
except ImportError:
    split_text = None

from telegram.constants import ParseMode  # ‚úÖ –¥–ª—è HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
import json
# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª—é—á—ë–Ω/–≤—ã–∫–ª—é—á–µ–Ω –ò–ò –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
_user_ai_enabled = {}



import os


from src.ai_providers.openai_compatible import ask_ai

def _inline_main_menu(ai_on: bool) -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="start_bot")],
        [InlineKeyboardButton("üõë –í—ã–∫–ª—é—á–∏—Ç—å –ò–ò" if ai_on else "ü§ñ –í–∫–ª—é—á–∏—Ç—å –ò–ò", callback_data="toggle_ai")],
        [
            InlineKeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    return InlineKeyboardMarkup(kb)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start)
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    ai_on = _user_ai_enabled.get(user_id, False)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Ç–≤–æ—ë –º–µ–Ω—é:",
        reply_markup=_inline_main_menu(ai_on)
    )

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def inline_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    ai_on = _user_ai_enabled.get(user_id, False)

    if query.data == "start_bot":
        await query.edit_message_text(
            "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ",
            reply_markup=_inline_main_menu(ai_on)
        )

    elif query.data == "toggle_ai":
        ai_on = not ai_on
        _user_ai_enabled[user_id] = ai_on
        await query.edit_message_text(
            f"–ò–ò {'–≤–∫–ª—é—á—ë–Ω ‚úÖ' if ai_on else '–≤—ã–∫–ª—é—á–µ–Ω ‚ùå'}",
            reply_markup=_inline_main_menu(ai_on)
        )

    elif query.data == "settings":
        await query.edit_message_text(
            "–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ üõ†",
            reply_markup=_inline_main_menu(ai_on)
        )

    elif query.data == "help":
        await query.edit_message_text(
            "–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ ‚ÑπÔ∏è",
            reply_markup=_inline_main_menu(ai_on)
        )

# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ
def register_handlers(app):
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CallbackQueryHandler(inline_menu_handler))