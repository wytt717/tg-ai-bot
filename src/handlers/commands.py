from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from src.utils.access import deny_if_not_allowed
from src.ai_providers.openai_compatible import ask_ai
import logging

try:
    from src.utils.memory import user_memory
except ImportError:
    user_memory = None

try:
    from src.utils.chunking import split_text
except ImportError:
    split_text = None

from telegram.constants import ParseMode  # ‚úÖ –¥–ª—è HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª—é—á—ë–Ω/–≤—ã–∫–ª—é—á–µ–Ω –ò–ò –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
_user_ai_enabled = {}


import json
import os


from src.ai_providers.openai_compatible import ask_ai

async def process_user_message(update, context):
    user_id = update.effective_user.id
    text = update.message.text

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings = get_user_settings(user_id)

    # –ü–µ—Ä–µ–¥–∞—ë–º –∏—Ö –≤ ask_ai
    response = await ask_ai(
        user_text=text,
        model=settings["model"],
        temperature=settings["temp"]
    )

    await update.message.reply_text(response)


SETTINGS_FILE = "settings.json"

DEFAULT_SETTINGS = {
    "model": "meta-llama/llama-4-scout-17b-16e-instruct",
    "temp": 0.7,
    "history": True,
    "lang": "RU",
    "theme": "light"
}

def load_settings():
    try:
        with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_settings():
    with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_settings, f, ensure_ascii=False, indent=2)

user_settings = load_settings()

def get_user_settings(user_id):
    if str(user_id) not in user_settings:
        user_settings[str(user_id)] = DEFAULT_SETTINGS.copy()
        save_settings()
    return user_settings[str(user_id)]

# ‚úÖ –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
def format_ai_response(text: str) -> str:
    text = text.strip()
    text = text.replace("\t", "    ")  # –∑–∞–º–µ–Ω—è–µ–º —Ç–∞–±—É–ª—è—Ü–∏—é –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    # –ü—Ä–∏–º–µ—Ä: –∫–æ–¥ –≤ –±–ª–æ–∫–∞—Ö
    if "```" in text:
        text = text.replace("```python", "<pre><code>").replace("```", "</code></pre>")
    # –°–ø–∏—Å–∫–∏
    text = text.replace("- ", "‚Ä¢ ")
    return text

def _main_menu(ai_on: bool) -> ReplyKeyboardMarkup:
    kb = [
        [KeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")],
        [KeyboardButton("üõë –í—ã–∫–ª—é—á–∏—Ç—å –ò–ò") if ai_on else KeyboardButton("ü§ñ –í–∫–ª—é—á–∏—Ç—å –ò–ò")],
        [KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(kb, resize_keyboard=True)

def _settings_menu() -> ReplyKeyboardMarkup:
    kb = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
    return ReplyKeyboardMarkup(kb, resize_keyboard=True)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await deny_if_not_allowed(update):
        return
    _user_ai_enabled[update.effective_user.id] = False
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üëã\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=_main_menu(False)
    )
# ====== –ú–ï–ù–Æ ======

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes

# ====== –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø ======
LANG_TEXTS = {
    "RU": {
        "main_menu": [
            ["–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"],
            ["ü§ñ –í–∫–ª—é—á–∏—Ç—å –ò–ò"],
            ["‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ùì –ü–æ–º–æ—â—å"]
        ],
        "settings_title": "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "help": "–ù–∞–∂–º–∏ ¬´–í–∫–ª—é—á–∏—Ç—å –ò–ò¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã.",
        "back": "‚¨Ö –ù–∞–∑–∞–¥",
        "lang_changed": "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π (RU)."
    },
    "EN": {
        "main_menu": [
            ["Start bot"],
            ["ü§ñ Enable AI"],
            ["‚öô Settings", "‚ùì Help"]
        ],
        "settings_title": "‚öô Settings",
        "help": "Press 'Enable AI' to start receiving answers.",
        "back": "‚¨Ö Back",
        "lang_changed": "You've selected English (EN) as your preferred language. How can I assist you today?"
    },
    "DE": {
        "main_menu": [
            ["Bot starten"],
            ["ü§ñ KI aktivieren"],
            ["‚öô Einstellungen", "‚ùì Hilfe"]
        ],
        "settings_title": "‚öô Einstellungen",
        "help": "Dr√ºcke 'KI aktivieren', um Antworten zu erhalten.",
        "back": "‚¨Ö Zur√ºck",
        "lang_changed": "Sie haben Deutsch (DE) als bevorzugte Sprache ausgew√§hlt."
    }
}

# ====== –ú–ï–ù–Æ ======
def _main_menu(ai_on: bool, lang: str) -> ReplyKeyboardMarkup:
    menu = [row[:] for row in LANG_TEXTS[lang]["main_menu"]]
    if ai_on:
        menu[1][0] = "üõë –í—ã–∫–ª—é—á–∏—Ç—å –ò–ò" if lang == "RU" else ("üõë Disable AI" if lang == "EN" else "üõë KI deaktivieren")
    return ReplyKeyboardMarkup(menu, resize_keyboard=True)

def _settings_menu(user_id):
    settings = get_user_settings(user_id)
    lang = settings["lang"]
    return {
        "text": (
            f"{LANG_TEXTS[lang]['settings_title']}\n\n"
            f"–ú–æ–¥–µ–ª—å: {settings['model']}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {settings['temp']}\n"
            f"–ò—Å—Ç–æ—Ä–∏—è: {'–≤–∫–ª' if settings['history'] else '–≤—ã–∫–ª'}\n"
            f"–Ø–∑—ã–∫: {settings['lang']}\n"
            f"–¢–µ–º–∞: {settings['theme']}"
        ),
        "keyboard": [
            ["ü§ñ –ú–æ–¥–µ–ª—å –ò–ò", "üéØ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"],
            ["üìú –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞", "üåê –Ø–∑—ã–∫"],
            ["üé® –¢–µ–º–∞", "‚ôª –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"],
            [LANG_TEXTS[lang]["back"]]
        ]
    }

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê–°–¢–†–û–ï–ö ======
async def handle_settings(update, uid, text):
    settings = get_user_settings(uid)
    lang = settings["lang"]

    # --- –ú–æ–¥–µ–ª—å ---
    if text == "ü§ñ –ú–æ–¥–µ–ª—å –ò–ò":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:" if lang == "RU" else ("Select model:" if lang == "EN" else "Modell ausw√§hlen:"),
            reply_markup=ReplyKeyboardMarkup(
                [["llama3-8b-8192", "mixtral-8x7b-32768"], [LANG_TEXTS[lang]["back"]]],
                resize_keyboard=True
            )
        )
        return True

    if text in ["llama3-8b-8192", "mixtral-8x7b-32768"]:
        settings["model"] = text
        save_settings()
        await update.message.reply_text(
            f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {text}",
            reply_markup=ReplyKeyboardMarkup(_settings_menu(uid)["keyboard"], resize_keyboard=True)
        )
        return True

    # --- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ---
    if text == "üéØ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É:" if lang == "RU" else ("Select temperature:" if lang == "EN" else "Temperatur ausw√§hlen:"),
            reply_markup=ReplyKeyboardMarkup([["0.0", "0.7", "1.0"], [LANG_TEXTS[lang]["back"]]], resize_keyboard=True)
        )
        return True

    if text in ["0.0", "0.7", "1.0"]:
        settings["temp"] = float(text)
        save_settings()
        await update.message.reply_text(
            f"‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {text}",
            reply_markup=ReplyKeyboardMarkup(_settings_menu(uid)["keyboard"], resize_keyboard=True)
        )
        return True

    # --- –ò—Å—Ç–æ—Ä–∏—è ---
    if text == "üìú –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞":
        settings["history"] = not settings["history"]
        save_settings()
        await update.message.reply_text(
            f"üìú –ò—Å—Ç–æ—Ä–∏—è —Ç–µ–ø–µ—Ä—å {'–≤–∫–ª—é—á–µ–Ω–∞' if settings['history'] else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}",
            reply_markup=ReplyKeyboardMarkup(_settings_menu(uid)["keyboard"], resize_keyboard=True)
        )
        return True

    # --- –Ø–∑—ã–∫ ---
    if text == "üåê –Ø–∑—ã–∫":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:" if lang == "RU" else ("Select language:" if lang == "EN" else "Sprache ausw√§hlen:"),
            reply_markup=ReplyKeyboardMarkup([["RU", "EN", "DE"], [LANG_TEXTS[lang]["back"]]], resize_keyboard=True)
        )
        return True

    if text in ["RU", "EN", "DE"]:
        settings["lang"] = text
        save_settings()
        await update.message.reply_text(
            LANG_TEXTS[text]["lang_changed"],
            reply_markup=_main_menu(_user_ai_enabled.get(uid, False), text)
        )
        return True

    # --- –¢–µ–º–∞ ---
    if text == "üé® –¢–µ–º–∞":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:" if lang == "RU" else ("Select theme:" if lang == "EN" else "Thema ausw√§hlen:"),
            reply_markup=ReplyKeyboardMarkup([["light", "dark"], [LANG_TEXTS[lang]["back"]]], resize_keyboard=True)
        )
        return True

    if text in ["light", "dark"]:
        settings["theme"] = text
        save_settings()
        await update.message.reply_text(
            f"‚úÖ –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {text}",
            reply_markup=ReplyKeyboardMarkup(_settings_menu(uid)["keyboard"], resize_keyboard=True)
        )
        return True

    # --- –°–±—Ä–æ—Å ---
    if text == "‚ôª –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫":
        user_settings[str(uid)] = DEFAULT_SETTINGS.copy()
        save_settings()
        await update.message.reply_text(
            "‚ôª –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã" if lang == "RU" else ("‚ôª Settings reset" if lang == "EN" else "‚ôª Einstellungen zur√ºckgesetzt"),
            reply_markup=ReplyKeyboardMarkup(_settings_menu(uid)["keyboard"], resize_keyboard=True)
        )
        return True

    return False


# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–ü–†–û–°–ê –ö –ò–ò ======

async def handle_ai_request(update, uid, text):
    context_data = None
    if user_memory:
        try:
            user_memory.add_message(uid, "user", text)
            context_data = user_memory.get_context(uid)
        except Exception:
            pass

    try:
        answer = await ask_ai(user_text=text)
    except TypeError:
        answer = await ask_ai(text)
    except Exception:
        answer = "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    if user_memory and answer:
        try:
            user_memory.add_message(uid, "assistant", answer)
        except Exception:
            pass

    if not answer:
        answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."

    if split_text:
        for part in split_text(answer):
            await update.message.reply_text(part)
    else:
        await update.message.reply_text(answer)

    # –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    context_data = None
    if user_memory:
        try:
            user_memory.add_message(uid, "user", text)
            context_data = user_memory.get_context(uid)
        except Exception:
            pass

    # –í—ã–∑–æ–≤ –ò–ò
    try:
        answer = await ask_ai(user_text=text)
    except TypeError:
        answer = await ask_ai(text)
    except Exception:
        answer = "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    if user_memory and answer:
        try:
            user_memory.add_message(uid, "assistant", answer)
        except Exception:
            pass

    if not answer:
        answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."

    if split_text:
        for part in split_text(answer):
            await update.message.reply_text(part)
    else:
        await update.message.reply_text(answer)

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ú–ï–ù–Æ ======
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await deny_if_not_allowed(update):
        return

    uid = update.effective_user.id
    text = (update.message.text or "").strip()
    settings = get_user_settings(uid)
    lang = settings["lang"]
    ai_on = _user_ai_enabled.get(uid, False)

    # ==== –ù–ê–í–ò–ì–ê–¶–ò–Ø ====
    if text in [LANG_TEXTS[lang]["back"], "üîô –ù–∞–∑–∞–¥"]:
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:" if lang == "RU" else ("Main menu:" if lang == "EN" else "Hauptmen√º:"),
            reply_markup=_main_menu(ai_on, lang)
        )
        return

    if text in ["‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚öô Settings", "‚öô Einstellungen"]:
        menu = _settings_menu(uid)
        await update.message.reply_text(
            menu["text"],
            reply_markup=ReplyKeyboardMarkup(menu["keyboard"], resize_keyboard=True)
        )
        return

    if text in ["‚ùì –ü–æ–º–æ—â—å", "‚ùì Help", "‚ùì Hilfe"]:
        await update.message.reply_text(LANG_TEXTS[lang]["help"])
        return

    # ==== –í–ö–õ/–í–´–ö–õ –ò–ò ====
    if text in ["ü§ñ –í–∫–ª—é—á–∏—Ç—å –ò–ò", "ü§ñ Enable AI", "ü§ñ KI aktivieren"]:
        _user_ai_enabled[uid] = True
        await update.message.reply_text(
            "–ò–ò –≤–∫–ª—é—á—ë–Ω ‚úÖ" if lang == "RU" else ("AI enabled ‚úÖ" if lang == "EN" else "KI aktiviert ‚úÖ"),
            reply_markup=_main_menu(True, lang)
        )
        return

    if text in ["üõë –í—ã–∫–ª—é—á–∏—Ç—å –ò–ò", "üõë Disable AI", "üõë KI deaktivieren"]:
        _user_ai_enabled[uid] = False
        await update.message.reply_text(
            "–ò–ò –≤—ã–∫–ª—é—á–µ–Ω ‚ùå" if lang == "RU" else ("AI disabled ‚ùå" if lang == "EN" else "KI deaktiviert ‚ùå"),
            reply_markup=_main_menu(False, lang)
        )
        return

    # ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
    if await handle_settings(update, uid, text):
        return

    # ==== –ü–†–û–í–ï–†–ö–ê –ò–ò ====
    if not ai_on:
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∏ –ò–ò —á–µ—Ä–µ–∑ –º–µ–Ω—é." if lang == "RU" else ("Please enable AI first." if lang == "EN" else "Bitte aktivieren Sie zuerst die KI.")
        )
        return
    context_data = None
    if user_memory:
        try:
            user_memory.add_message(uid, "user", text)
            context_data = user_memory.get_context(uid)
        except Exception:
            pass

    # –í—ã–∑–æ–≤ –ò–ò
    try:
        answer = await ask_ai(user_text=text)
    except TypeError:
        answer = await ask_ai(text)
    except Exception:
        answer = "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    if user_memory and answer:
        try:
            user_memory.add_message(uid, "assistant", answer)
        except Exception:
            pass

    if not answer:
        answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."

    # ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    answer = format_ai_response(answer)

    if split_text:
        for part in split_text(answer):
            await update.message.reply_text(part, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    else:
        await update.message.reply_text(answer, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

def register_handlers(app):
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_handler))  