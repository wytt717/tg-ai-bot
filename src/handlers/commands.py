from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters

from src.utils.access import deny_if_not_allowed
from src.ai_providers.openai_compatible import ask_ai

import logging

try:
    from src.utils.memory import user_memory
except ImportError:
    user_memory = None

try:
    from src.utils.chunking import split_text
except ImportError:
    split_text = None

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª—é—á—ë–Ω/–≤—ã–∫–ª—é—á–µ–Ω –ò–ò –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
_user_ai_enabled = {}

async def cmd_start(update, context):
    uid = update.effective_user.id

    if uid not in _user_ai_enabled:
        _user_ai_enabled[uid] = False

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!",
        reply_markup=_main_menu(_user_ai_enabled[uid])
    )

def _main_menu(ai_on: bool) -> ReplyKeyboardMarkup:
    kb = [
        [KeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")],
        # [KeyboardButton("/help")],
        [KeyboardButton("üõë –í—ã–∫–ª—é—á–∏—Ç—å –ò–ò") if ai_on else KeyboardButton("ü§ñ –í–∫–ª—é—á–∏—Ç—å –ò–ò")],
        [KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(kb, resize_keyboard=True)

def _settings_menu() -> ReplyKeyboardMarkup:
    kb = [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
    return ReplyKeyboardMarkup(kb, resize_keyboard=True)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await deny_if_not_allowed(update):
        return
    _user_ai_enabled[update.effective_user.id] = False
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üëã\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=_main_menu(False)
    )

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await deny_if_not_allowed(update):
        return

    uid = update.effective_user.id
    text = (update.message.text or "").strip()
    ai_on = _user_ai_enabled.get(uid, False)

    if text == "ü§ñ –í–∫–ª—é—á–∏—Ç—å –ò–ò":
        _user_ai_enabled[uid] = True
        await update.message.reply_text("–ò–ò –≤–∫–ª—é—á—ë–Ω ‚úÖ. –ü–∏—à–∏ –∑–∞–ø—Ä–æ—Å—ã.", reply_markup=_main_menu(True))
        return

    if text == "üõë –í—ã–∫–ª—é—á–∏—Ç—å –ò–ò":
        _user_ai_enabled[uid] = False
        await update.message.reply_text("–ò–ò –≤—ã–∫–ª—é—á–µ–Ω ‚ùå.", reply_markup=_main_menu(False))
        return

    if text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text("–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=_settings_menu())
        return

    if text == "‚ùì –ü–æ–º–æ—â—å":
        await update.message.reply_text("–ù–∞–∂–º–∏ ¬´–í–∫–ª—é—á–∏—Ç—å –ò–ò¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã.")
        return

    if text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=_main_menu(ai_on))
        return

    if not ai_on:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∏ –ò–ò —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
        return

    # –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    context_data = None
    if user_memory:
        try:
            user_memory.add_message(uid, "user", text)
            context_data = user_memory.get_context(uid)
        except Exception:
            pass

    # –í—ã–∑–æ–≤ –ò–ò
    try:
        answer = await ask_ai(user_text=text)
    except TypeError:
        answer = await ask_ai(text)
    except Exception:
        answer = "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    if user_memory and answer:
        try:
            user_memory.add_message(uid, "assistant", answer)
        except Exception:
            pass

    if not answer:
        answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."

    if split_text:
        for part in split_text(answer):
            await update.message.reply_text(part)
    else:
        await update.message.reply_text(answer)

def register_handlers(app):
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_handler))
