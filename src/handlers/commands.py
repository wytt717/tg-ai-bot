from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from src.ai_providers.openai_compatible import ask_ai, SYSTEM_PROMPT
from src.utils.access import deny_if_not_allowed

import re

try:
    from src.utils.memory import user_memory
except ImportError:
    user_memory = None

from telegram.constants import ParseMode  # ‚úÖ –¥–ª—è HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª—é—á—ë–Ω/–≤—ã–∫–ª—é—á–µ–Ω –ò–ò –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
_user_ai_enabled = {}
_user_settings = {}  # user_id -> {"model": "...", "lang": "...", "spec": "..."}

_last_ai_response = {}  # user_id -> {"text": str, "msg_id": int}

callback_data="menu_open_from_dialog"


def _inline_main_menu(user_id: int) -> InlineKeyboardMarkup:
    ai_on = _user_ai_enabled.get(user_id, False)
    kb = [
        [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="start_bot")],
        [InlineKeyboardButton("üõë –í—ã–∫–ª—é—á–∏—Ç—å –ò–ò" if ai_on else "ü§ñ –í–∫–ª—é—á–∏—Ç—å –ò–ò", callback_data="toggle_ai")],
        [
        InlineKeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ],

    ]
    return InlineKeyboardMarkup(kb)

def _inline_settings_menu(user_id: int) -> InlineKeyboardMarkup:
    settings = _user_settings.get(user_id, {"model": "‚Äî", "lang": "‚Äî", "spec": "‚Äî"})
    kb = [
        [InlineKeyboardButton(f"–ú–æ–¥–µ–ª—å: {settings['model']}", callback_data="settings_model")],
        [InlineKeyboardButton(f"–Ø–∑—ã–∫: {settings['lang']}", callback_data="settings_lang")],
        [InlineKeyboardButton(f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {settings['spec']}", callback_data="settings_spec")],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    return InlineKeyboardMarkup(kb)

# /start
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await deny_if_not_allowed(update):
        return  # –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
    
    user_id = update.effective_user.id
    _user_ai_enabled.setdefault(user_id, False)
    _user_settings.setdefault(user_id, {"model": "‚Äî", "lang": "‚Äî", "spec": "‚Äî"})
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Ç–≤–æ—ë –º–µ–Ω—é:",
        reply_markup=_inline_main_menu(user_id)
    )

# –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –º–µ–Ω—é (–ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏)
async def menu_status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –º–µ–Ω—é / —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—â–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    ai_on = _user_ai_enabled.get(user_id, False)
    settings = _user_settings.get(user_id, {"model": "‚Äî", "lang": "‚Äî"})
    await update.message.reply_text(
        f"ü§ñ –ò–ò: {'–í–∫–ª' if ai_on else '–í—ã–∫–ª'} | {settings['model']} | {settings['lang']}\n"
        "–ù–∞–∂–º–∏ /menu, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é."
    )


def sanitize_text(s: str, lang: str) -> str:
    if lang.lower().startswith("ru"):
        # —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ + –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        return re.sub(r"[^–ê-–Ø–∞-—è–Å—ë0-9\s.,:;!?()\[\]¬´¬ª\"'‚Äî\-‚Ä¶]", "", s)
    elif lang.lower().startswith("en"):
        # —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞ + –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        return re.sub(r"[^A-Za-z0-9\s.,:;!?()\[\]\"'‚Äî\-‚Ä¶]", "", s)
    else:
        # –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ ‚Äî –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π
        return s

# —á–∞—Ç —Å –ò–ò
async def ai_chat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not _user_ai_enabled.get(user_id, False):
        return await menu_status_handler(update, context)

    prompt = update.message.text
    settings = _user_settings.get(user_id, {"model": "‚Äî", "lang": "‚Äî", "spec": "‚Äî"})

    # --- –†–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é ---
    context_data = None
    if user_memory:
        try:
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_memory.add_message(user_id, "user", prompt)
            # –¥–æ—Å—Ç–∞—ë–º –∏—Å—Ç–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
            context_data = user_memory.get_context(user_id)
        except Exception:
            pass

    # —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    system_instructions = []
    if settings["model"] != "‚Äî":
        system_instructions.append(f"[–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å: {settings['model']}]")
    if settings["lang"] != "‚Äî":
        system_instructions.append(f"[–Ø–∑—ã–∫ –æ–±—â–µ–Ω–∏—è: {settings['lang']}]")
    if settings["spec"] != "‚Äî":
        system_instructions.append(f"[–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {settings['spec']}]")

    # --- –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ---

    # --- –°–∫–ª–µ–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ç–µ–∫—Å—Ç ---
    history_text = ""
    if context_data:
        for msg in context_data:
            role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg["role"] == "user" else "–ò–ò"
            history_text += f"{role}: {msg['content']}\n"

    # --- –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç ---
    full_prompt = (
        SYSTEM_PROMPT + "\n" +
        "\n".join(system_instructions) +
        "\n\n–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n" + history_text +
        f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {prompt}"
    )

    try:
        ai_response = await ask_ai(full_prompt)

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ø–∞–º—è—Ç—å ---
        if user_memory:
            try:
                user_memory.add_message(user_id, "assistant", ai_response)
            except Exception:
                pass

        ai_response = sanitize_text(ai_response, settings["lang"])
        formatted = format_ai_response(ai_response)

        ai_on = _user_ai_enabled.get(user_id, False)
        short_menu = InlineKeyboardMarkup([[
            InlineKeyboardButton(
                f"ü§ñ {'–í–∫–ª' if ai_on else '–í—ã–∫–ª'} | {settings['model']} | {settings['lang']}",
                callback_data="menu_open"
            )
        ]])

        sent_msg = await update.message.reply_text(
            formatted,
            reply_markup=short_menu,
            parse_mode=ParseMode.HTML
        )

        _last_ai_response[user_id] = {
            "text": ai_response,
            "msg_id": sent_msg.message_id
        }
        context.user_data["from_dialog_session"] = True

    except Exception as e:
        await update.message.reply_text(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {e}")


def _inline_main_menu_with_return(user_id: int, from_dialog: bool) -> InlineKeyboardMarkup:
    kb = [list(row) for row in _inline_main_menu(user_id).inline_keyboard]
    if from_dialog and user_id in _last_ai_response:
        kb.append([InlineKeyboardButton("‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ç–≤–µ—Ç—É", callback_data="back_to_answer")])
    return InlineKeyboardMarkup(kb)

# inline –º–µ–Ω—é
async def inline_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await deny_if_not_allowed(update):
        return

    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    data = query.data
    from_dialog = context.user_data.get("from_dialog_session", False)

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "start_bot":
        await query.edit_message_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ", reply_markup=_inline_main_menu_with_return(user_id, from_dialog))

    elif data == "toggle_ai":
        _user_ai_enabled[user_id] = not _user_ai_enabled.get(user_id, False)
        await query.edit_message_text(
            f"–ò–ò {'–≤–∫–ª—é—á—ë–Ω ‚úÖ' if _user_ai_enabled[user_id] else '–≤—ã–∫–ª—é—á–µ–Ω ‚ùå'}",
            reply_markup=_inline_main_menu_with_return(user_id, from_dialog)
        )

    elif data == "settings":
        await query.edit_message_text("–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ üõ†", reply_markup=_inline_settings_menu(user_id))

    elif data == "help":
        await query.edit_message_text(
            "‚Ñπ –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=_inline_main_menu_with_return(user_id, from_dialog)
        )

    elif data == "back_main" or data == "menu_open":
        context.user_data["from_dialog_session"] = False
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=_inline_main_menu_with_return(user_id, False))

    elif data == "back_to_answer":
        last = _last_ai_response.get(user_id)
        if last:
            ai_on = _user_ai_enabled.get(user_id, False)
            settings = _user_settings.get(user_id, {"model": "‚Äî", "lang": "‚Äî"})
            short_menu = InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    f"{'–í–∫–ª' if ai_on else '–í—ã–∫–ª'} | {settings['model']} | {settings['lang']}",
                    callback_data="menu_open"
                )
            ]])
            await query.edit_message_text(last["text"], reply_markup=short_menu)
        context.user_data["from_dialog_session"] = False

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    elif data == "settings_model":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("GPT‚Äë4", callback_data="set_model_gpt4")],
                [InlineKeyboardButton("GPT‚Äë3.5", callback_data="set_model_gpt35")],
                [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="settings")]
            ])
        )

    elif data == "settings_lang":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru")],
                [InlineKeyboardButton("English", callback_data="set_lang_en")],
                [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="settings")]
            ])
        )

    elif data == "settings_spec":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="set_spec_code")],
                [InlineKeyboardButton("–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", callback_data="set_spec_marketing")],
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é", callback_data="set_spec_custom")],
                [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="settings")]
            ])
        )


    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    elif data == "set_model_gpt4":
        _user_settings[user_id]["model"] = "GPT‚Äë4"
        await query.edit_message_text("‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: GPT‚Äë4", reply_markup=_inline_settings_menu(user_id))

    elif data == "set_model_gpt35":
        _user_settings[user_id]["model"] = "GPT‚Äë3.5"
        await query.edit_message_text("‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: GPT‚Äë3.5", reply_markup=_inline_settings_menu(user_id))

    elif data == "set_lang_ru":
        _user_settings[user_id]["lang"] = "–†—É—Å—Å–∫–∏–π"
        await query.edit_message_text("‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π", reply_markup=_inline_settings_menu(user_id))

    elif data == "set_lang_en":
        _user_settings[user_id]["lang"] = "English"
        await query.edit_message_text("‚úÖ Language set: English", reply_markup=_inline_settings_menu(user_id))

    elif data == "set_spec_code":
        _user_settings[user_id]["spec"] = "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
        await query.edit_message_text("‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", reply_markup=_inline_settings_menu(user_id))

    elif data == "set_spec_marketing":
        _user_settings[user_id]["spec"] = "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"
        await query.edit_message_text("‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", reply_markup=_inline_settings_menu(user_id))
    
    elif data == "set_spec_custom":
        context.user_data["awaiting_custom_spec"] = True
        await query.edit_message_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑¬ª –∏–ª–∏ ¬´UX-–¥–∏–∑–∞–π–Ω¬ª):"
        )  

    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫–Ω–æ–ø–∫–∏", show_alert=True)

async def custom_spec_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if context.user_data.get("awaiting_custom_spec"):
        custom_spec = update.message.text.strip()
        _user_settings[user_id]["spec"] = custom_spec
        context.user_data["awaiting_custom_spec"] = False

        await update.message.reply_text(
            f"‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <b>{custom_spec}</b>",
            reply_markup=_inline_settings_menu(user_id),
            parse_mode=ParseMode.HTML
        )
        return

    # –µ—Å–ª–∏ –Ω–µ –∂–¥—ë–º –≤–≤–æ–¥ ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –≤ —á–∞—Ç —Å –ò–ò
    await ai_chat_handler(update, context)


def format_ai_response(text: str) -> str:
    # Markdown -> HTML –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏–π
    text = re.sub(r"\*\*(.+?)\*\*", r"<b>\1</b>", text)
    text = re.sub(r"\*(.+?)\*", r"<i>\1</i>", text)




    # –°–ø–∏—Å–∫–∏
    text = re.sub(r"^\s*[\*\-]\s+", r"‚Ä¢ ", text, flags=re.MULTILINE)
    text = re.sub(r"^(\d+)\.\s+", r"\1) ", text, flags=re.MULTILINE)

    # –ö–æ–¥–æ–≤—ã–µ –±–ª–æ–∫–∏
    def escape_code_block(match):
        code = match.group(1)
        code = code.replace("<", "&lt;").replace(">", "&gt;")
        code = code.strip("\n")
        code = re.sub(r"\n{3,}", "\n\n", code)
        return f"<pre><code>{code}</code></pre>"

    text = re.sub(r"```(.*?)```", escape_code_block, text, flags=re.DOTALL)

    # –û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–¥
    text = re.sub(
        r"`([^`\n]+)`",
        lambda m: f"<code>{m.group(1).replace('<', '&lt;').replace('>', '&gt;')}</code>",
        text
    )

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤–Ω–µ –∫–æ–¥–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
    def normalize_text_block(block):
        return re.sub(r"\n{3,}", "\n\n", block)

    parts = re.split(r"(<pre><code>.*?</code></pre>)", text, flags=re.DOTALL)
    for i in range(0, len(parts), 2):
        parts[i] = normalize_text_block(parts[i])
    text = "".join(parts)

    return text

# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_handlers(app):
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("menu", start_handler))  # –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é
    app.add_handler(CallbackQueryHandler(inline_menu_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ai_chat_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, custom_spec_handler))
